Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    SEMICOLON

Grammar

Rule 0     S' -> program
Rule 1     program -> expr
Rule 2     program -> empty
Rule 3     program -> assign
Rule 4     empty -> <empty>
Rule 5     assign -> IDENTIFIER EQUALS expr
Rule 6     assign -> IDENTIFIER EQUALS IDENTIFIER
Rule 7     expr -> expr PLUS expr
Rule 8     expr -> expr MINUS expr
Rule 9     expr -> expr DIVIDE expr
Rule 10    expr -> expr TIMES expr
Rule 11    expr -> expr MOD expr
Rule 12    expr -> expr LT expr
Rule 13    expr -> expr GT expr
Rule 14    expr -> expr EQV expr
Rule 15    expr -> LPAREN expr RPAREN
Rule 16    expr -> NUMBER
Rule 17    expr -> IDENTIFIER
Rule 18    expr -> PRINT expr

Terminals, with rules where they appear

ASSIGN               : 
DIVIDE               : 9
EQUALS               : 5 6
EQV                  : 14
GT                   : 13
IDENTIFIER           : 5 6 6 17
LPAREN               : 15
LT                   : 12
MINUS                : 8
MOD                  : 11
NUMBER               : 16
PLUS                 : 7
PRINT                : 18
RPAREN               : 15
SEMICOLON            : 
TIMES                : 10
error                : 

Nonterminals, with rules where they appear

assign               : 3
empty                : 2
expr                 : 1 5 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 18
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . expr
    (2) program -> . empty
    (3) program -> . assign
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr
    (4) empty -> .
    (5) assign -> . IDENTIFIER EQUALS expr
    (6) assign -> . IDENTIFIER EQUALS IDENTIFIER

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 7
    PRINT           shift and go to state 8
    $end            reduce using rule 4 (empty -> .)

    program                        shift and go to state 1
    expr                           shift and go to state 2
    empty                          shift and go to state 3
    assign                         shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

    $end            reduce using rule 1 (program -> expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12
    MOD             shift and go to state 13
    LT              shift and go to state 14
    GT              shift and go to state 15
    EQV             shift and go to state 16


state 3

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 4

    (3) program -> assign .

    $end            reduce using rule 3 (program -> assign .)


state 5

    (15) expr -> LPAREN . expr RPAREN
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 17

state 6

    (16) expr -> NUMBER .

    PLUS            reduce using rule 16 (expr -> NUMBER .)
    MINUS           reduce using rule 16 (expr -> NUMBER .)
    DIVIDE          reduce using rule 16 (expr -> NUMBER .)
    TIMES           reduce using rule 16 (expr -> NUMBER .)
    MOD             reduce using rule 16 (expr -> NUMBER .)
    LT              reduce using rule 16 (expr -> NUMBER .)
    GT              reduce using rule 16 (expr -> NUMBER .)
    EQV             reduce using rule 16 (expr -> NUMBER .)
    $end            reduce using rule 16 (expr -> NUMBER .)
    RPAREN          reduce using rule 16 (expr -> NUMBER .)


state 7

    (17) expr -> IDENTIFIER .
    (5) assign -> IDENTIFIER . EQUALS expr
    (6) assign -> IDENTIFIER . EQUALS IDENTIFIER

    PLUS            reduce using rule 17 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 17 (expr -> IDENTIFIER .)
    DIVIDE          reduce using rule 17 (expr -> IDENTIFIER .)
    TIMES           reduce using rule 17 (expr -> IDENTIFIER .)
    MOD             reduce using rule 17 (expr -> IDENTIFIER .)
    LT              reduce using rule 17 (expr -> IDENTIFIER .)
    GT              reduce using rule 17 (expr -> IDENTIFIER .)
    EQV             reduce using rule 17 (expr -> IDENTIFIER .)
    $end            reduce using rule 17 (expr -> IDENTIFIER .)
    EQUALS          shift and go to state 19


state 8

    (18) expr -> PRINT . expr
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 20

state 9

    (7) expr -> expr PLUS . expr
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 21

state 10

    (8) expr -> expr MINUS . expr
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 22

state 11

    (9) expr -> expr DIVIDE . expr
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 23

state 12

    (10) expr -> expr TIMES . expr
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 24

state 13

    (11) expr -> expr MOD . expr
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 25

state 14

    (12) expr -> expr LT . expr
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 26

state 15

    (13) expr -> expr GT . expr
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 27

state 16

    (14) expr -> expr EQV . expr
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 18
    PRINT           shift and go to state 8

    expr                           shift and go to state 28

state 17

    (15) expr -> LPAREN expr . RPAREN
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

    RPAREN          shift and go to state 29
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12
    MOD             shift and go to state 13
    LT              shift and go to state 14
    GT              shift and go to state 15
    EQV             shift and go to state 16


state 18

    (17) expr -> IDENTIFIER .

    RPAREN          reduce using rule 17 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 17 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 17 (expr -> IDENTIFIER .)
    DIVIDE          reduce using rule 17 (expr -> IDENTIFIER .)
    TIMES           reduce using rule 17 (expr -> IDENTIFIER .)
    MOD             reduce using rule 17 (expr -> IDENTIFIER .)
    LT              reduce using rule 17 (expr -> IDENTIFIER .)
    GT              reduce using rule 17 (expr -> IDENTIFIER .)
    EQV             reduce using rule 17 (expr -> IDENTIFIER .)
    $end            reduce using rule 17 (expr -> IDENTIFIER .)


state 19

    (5) assign -> IDENTIFIER EQUALS . expr
    (6) assign -> IDENTIFIER EQUALS . IDENTIFIER
    (7) expr -> . expr PLUS expr
    (8) expr -> . expr MINUS expr
    (9) expr -> . expr DIVIDE expr
    (10) expr -> . expr TIMES expr
    (11) expr -> . expr MOD expr
    (12) expr -> . expr LT expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr EQV expr
    (15) expr -> . LPAREN expr RPAREN
    (16) expr -> . NUMBER
    (17) expr -> . IDENTIFIER
    (18) expr -> . PRINT expr

    IDENTIFIER      shift and go to state 30
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    PRINT           shift and go to state 8

    expr                           shift and go to state 31

state 20

    (18) expr -> PRINT expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQV resolved as shift
    $end            reduce using rule 18 (expr -> PRINT expr .)
    RPAREN          reduce using rule 18 (expr -> PRINT expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12
    MOD             shift and go to state 13
    LT              shift and go to state 14
    GT              shift and go to state 15
    EQV             shift and go to state 16

  ! PLUS            [ reduce using rule 18 (expr -> PRINT expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> PRINT expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> PRINT expr .) ]
  ! TIMES           [ reduce using rule 18 (expr -> PRINT expr .) ]
  ! MOD             [ reduce using rule 18 (expr -> PRINT expr .) ]
  ! LT              [ reduce using rule 18 (expr -> PRINT expr .) ]
  ! GT              [ reduce using rule 18 (expr -> PRINT expr .) ]
  ! EQV             [ reduce using rule 18 (expr -> PRINT expr .) ]


state 21

    (7) expr -> expr PLUS expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

    PLUS            reduce using rule 7 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 7 (expr -> expr PLUS expr .)
    MOD             reduce using rule 7 (expr -> expr PLUS expr .)
    LT              reduce using rule 7 (expr -> expr PLUS expr .)
    GT              reduce using rule 7 (expr -> expr PLUS expr .)
    EQV             reduce using rule 7 (expr -> expr PLUS expr .)
    $end            reduce using rule 7 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 7 (expr -> expr PLUS expr .)
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12

  ! DIVIDE          [ reduce using rule 7 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 7 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! MOD             [ shift and go to state 13 ]
  ! LT              [ shift and go to state 14 ]
  ! GT              [ shift and go to state 15 ]
  ! EQV             [ shift and go to state 16 ]


state 22

    (8) expr -> expr MINUS expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

    PLUS            reduce using rule 8 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 8 (expr -> expr MINUS expr .)
    MOD             reduce using rule 8 (expr -> expr MINUS expr .)
    LT              reduce using rule 8 (expr -> expr MINUS expr .)
    GT              reduce using rule 8 (expr -> expr MINUS expr .)
    EQV             reduce using rule 8 (expr -> expr MINUS expr .)
    $end            reduce using rule 8 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 8 (expr -> expr MINUS expr .)
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12

  ! DIVIDE          [ reduce using rule 8 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 8 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! MOD             [ shift and go to state 13 ]
  ! LT              [ shift and go to state 14 ]
  ! GT              [ shift and go to state 15 ]
  ! EQV             [ shift and go to state 16 ]


state 23

    (9) expr -> expr DIVIDE expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

    PLUS            reduce using rule 9 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 9 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 9 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 9 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 9 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 9 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 9 (expr -> expr DIVIDE expr .)
    EQV             reduce using rule 9 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 9 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 9 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! TIMES           [ shift and go to state 12 ]
  ! MOD             [ shift and go to state 13 ]
  ! LT              [ shift and go to state 14 ]
  ! GT              [ shift and go to state 15 ]
  ! EQV             [ shift and go to state 16 ]


state 24

    (10) expr -> expr TIMES expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

    PLUS            reduce using rule 10 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 10 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 10 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 10 (expr -> expr TIMES expr .)
    MOD             reduce using rule 10 (expr -> expr TIMES expr .)
    LT              reduce using rule 10 (expr -> expr TIMES expr .)
    GT              reduce using rule 10 (expr -> expr TIMES expr .)
    EQV             reduce using rule 10 (expr -> expr TIMES expr .)
    $end            reduce using rule 10 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 10 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]
  ! TIMES           [ shift and go to state 12 ]
  ! MOD             [ shift and go to state 13 ]
  ! LT              [ shift and go to state 14 ]
  ! GT              [ shift and go to state 15 ]
  ! EQV             [ shift and go to state 16 ]


state 25

    (11) expr -> expr MOD expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQV resolved as shift
    $end            reduce using rule 11 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 11 (expr -> expr MOD expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12
    MOD             shift and go to state 13
    LT              shift and go to state 14
    GT              shift and go to state 15
    EQV             shift and go to state 16

  ! PLUS            [ reduce using rule 11 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 11 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 11 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 11 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 11 (expr -> expr MOD expr .) ]
  ! LT              [ reduce using rule 11 (expr -> expr MOD expr .) ]
  ! GT              [ reduce using rule 11 (expr -> expr MOD expr .) ]
  ! EQV             [ reduce using rule 11 (expr -> expr MOD expr .) ]


state 26

    (12) expr -> expr LT expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQV resolved as shift
    $end            reduce using rule 12 (expr -> expr LT expr .)
    RPAREN          reduce using rule 12 (expr -> expr LT expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12
    MOD             shift and go to state 13
    LT              shift and go to state 14
    GT              shift and go to state 15
    EQV             shift and go to state 16

  ! PLUS            [ reduce using rule 12 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 12 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 12 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 12 (expr -> expr LT expr .) ]
  ! LT              [ reduce using rule 12 (expr -> expr LT expr .) ]
  ! GT              [ reduce using rule 12 (expr -> expr LT expr .) ]
  ! EQV             [ reduce using rule 12 (expr -> expr LT expr .) ]


state 27

    (13) expr -> expr GT expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQV resolved as shift
    $end            reduce using rule 13 (expr -> expr GT expr .)
    RPAREN          reduce using rule 13 (expr -> expr GT expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12
    MOD             shift and go to state 13
    LT              shift and go to state 14
    GT              shift and go to state 15
    EQV             shift and go to state 16

  ! PLUS            [ reduce using rule 13 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 13 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 13 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 13 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 13 (expr -> expr GT expr .) ]
  ! LT              [ reduce using rule 13 (expr -> expr GT expr .) ]
  ! GT              [ reduce using rule 13 (expr -> expr GT expr .) ]
  ! EQV             [ reduce using rule 13 (expr -> expr GT expr .) ]


state 28

    (14) expr -> expr EQV expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for EQV resolved as shift
    $end            reduce using rule 14 (expr -> expr EQV expr .)
    RPAREN          reduce using rule 14 (expr -> expr EQV expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12
    MOD             shift and go to state 13
    LT              shift and go to state 14
    GT              shift and go to state 15
    EQV             shift and go to state 16

  ! PLUS            [ reduce using rule 14 (expr -> expr EQV expr .) ]
  ! MINUS           [ reduce using rule 14 (expr -> expr EQV expr .) ]
  ! DIVIDE          [ reduce using rule 14 (expr -> expr EQV expr .) ]
  ! TIMES           [ reduce using rule 14 (expr -> expr EQV expr .) ]
  ! MOD             [ reduce using rule 14 (expr -> expr EQV expr .) ]
  ! LT              [ reduce using rule 14 (expr -> expr EQV expr .) ]
  ! GT              [ reduce using rule 14 (expr -> expr EQV expr .) ]
  ! EQV             [ reduce using rule 14 (expr -> expr EQV expr .) ]


state 29

    (15) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 15 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 15 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 15 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 15 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 15 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 15 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 15 (expr -> LPAREN expr RPAREN .)
    EQV             reduce using rule 15 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 15 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 15 (expr -> LPAREN expr RPAREN .)


state 30

    (6) assign -> IDENTIFIER EQUALS IDENTIFIER .
    (17) expr -> IDENTIFIER .

  ! reduce/reduce conflict for $end resolved using rule 6 (assign -> IDENTIFIER EQUALS IDENTIFIER .)
    $end            reduce using rule 6 (assign -> IDENTIFIER EQUALS IDENTIFIER .)
    PLUS            reduce using rule 17 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 17 (expr -> IDENTIFIER .)
    DIVIDE          reduce using rule 17 (expr -> IDENTIFIER .)
    TIMES           reduce using rule 17 (expr -> IDENTIFIER .)
    MOD             reduce using rule 17 (expr -> IDENTIFIER .)
    LT              reduce using rule 17 (expr -> IDENTIFIER .)
    GT              reduce using rule 17 (expr -> IDENTIFIER .)
    EQV             reduce using rule 17 (expr -> IDENTIFIER .)

  ! $end            [ reduce using rule 17 (expr -> IDENTIFIER .) ]


state 31

    (5) assign -> IDENTIFIER EQUALS expr .
    (7) expr -> expr . PLUS expr
    (8) expr -> expr . MINUS expr
    (9) expr -> expr . DIVIDE expr
    (10) expr -> expr . TIMES expr
    (11) expr -> expr . MOD expr
    (12) expr -> expr . LT expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . EQV expr

    $end            reduce using rule 5 (assign -> IDENTIFIER EQUALS expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    DIVIDE          shift and go to state 11
    TIMES           shift and go to state 12
    MOD             shift and go to state 13
    LT              shift and go to state 14
    GT              shift and go to state 15
    EQV             shift and go to state 16

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 20 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 20 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 20 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 20 resolved as shift
WARNING: shift/reduce conflict for MOD in state 20 resolved as shift
WARNING: shift/reduce conflict for LT in state 20 resolved as shift
WARNING: shift/reduce conflict for GT in state 20 resolved as shift
WARNING: shift/reduce conflict for EQV in state 20 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 25 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 25 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 25 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 25 resolved as shift
WARNING: shift/reduce conflict for MOD in state 25 resolved as shift
WARNING: shift/reduce conflict for LT in state 25 resolved as shift
WARNING: shift/reduce conflict for GT in state 25 resolved as shift
WARNING: shift/reduce conflict for EQV in state 25 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 26 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 26 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 26 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 26 resolved as shift
WARNING: shift/reduce conflict for MOD in state 26 resolved as shift
WARNING: shift/reduce conflict for LT in state 26 resolved as shift
WARNING: shift/reduce conflict for GT in state 26 resolved as shift
WARNING: shift/reduce conflict for EQV in state 26 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 27 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 27 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 27 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 27 resolved as shift
WARNING: shift/reduce conflict for MOD in state 27 resolved as shift
WARNING: shift/reduce conflict for LT in state 27 resolved as shift
WARNING: shift/reduce conflict for GT in state 27 resolved as shift
WARNING: shift/reduce conflict for EQV in state 27 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 28 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 28 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 28 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 28 resolved as shift
WARNING: shift/reduce conflict for MOD in state 28 resolved as shift
WARNING: shift/reduce conflict for LT in state 28 resolved as shift
WARNING: shift/reduce conflict for GT in state 28 resolved as shift
WARNING: shift/reduce conflict for EQV in state 28 resolved as shift
WARNING: reduce/reduce conflict in state 30 resolved using rule (assign -> IDENTIFIER EQUALS IDENTIFIER)
WARNING: rejected rule (expr -> IDENTIFIER) in state 30
