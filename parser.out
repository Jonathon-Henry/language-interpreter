Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    DIVIDE
    EQV
    GT
    GTE
    LPAREN
    LT
    LTE
    MOD
    PRINT
    RPAREN
    SEMICOLON
    TIMES

Grammar

Rule 0     S' -> program
Rule 1     program -> expr
Rule 2     program -> empty
Rule 3     empty -> <empty>
Rule 4     assign -> IDENTIFIER EQUALS expr
Rule 5     expr -> expr PLUS expr
Rule 6     expr -> expr MINUS expr
Rule 7     expr -> empty
Rule 8     expr -> NUMBER

Terminals, with rules where they appear

ASSIGN               : 
DIVIDE               : 
EQUALS               : 4
EQV                  : 
GT                   : 
GTE                  : 
IDENTIFIER           : 4
LPAREN               : 
LT                   : 
LTE                  : 
MINUS                : 6
MOD                  : 
NUMBER               : 8
PLUS                 : 5
PRINT                : 
RPAREN               : 
SEMICOLON            : 
TIMES                : 
error                : 

Nonterminals, with rules where they appear

assign               : 
empty                : 2 7
expr                 : 1 4 5 5 6 6
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . expr
    (2) program -> . empty
    (5) expr -> . expr PLUS expr
    (6) expr -> . expr MINUS expr
    (7) expr -> . empty
    (8) expr -> . NUMBER
    (3) empty -> .

    NUMBER          shift and go to state 4
    $end            reduce using rule 3 (empty -> .)
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)

    program                        shift and go to state 1
    expr                           shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> expr .
    (5) expr -> expr . PLUS expr
    (6) expr -> expr . MINUS expr

    $end            reduce using rule 1 (program -> expr .)
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6


state 3

    (2) program -> empty .
    (7) expr -> empty .

  ! reduce/reduce conflict for $end resolved using rule 2 (program -> empty .)
    $end            reduce using rule 2 (program -> empty .)
    PLUS            reduce using rule 7 (expr -> empty .)
    MINUS           reduce using rule 7 (expr -> empty .)

  ! $end            [ reduce using rule 7 (expr -> empty .) ]


state 4

    (8) expr -> NUMBER .

    PLUS            reduce using rule 8 (expr -> NUMBER .)
    MINUS           reduce using rule 8 (expr -> NUMBER .)
    $end            reduce using rule 8 (expr -> NUMBER .)


state 5

    (5) expr -> expr PLUS . expr
    (5) expr -> . expr PLUS expr
    (6) expr -> . expr MINUS expr
    (7) expr -> . empty
    (8) expr -> . NUMBER
    (3) empty -> .

    NUMBER          shift and go to state 4
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    expr                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (6) expr -> expr MINUS . expr
    (5) expr -> . expr PLUS expr
    (6) expr -> . expr MINUS expr
    (7) expr -> . empty
    (8) expr -> . NUMBER
    (3) empty -> .

    NUMBER          shift and go to state 4
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    expr                           shift and go to state 9
    empty                          shift and go to state 8

state 7

    (5) expr -> expr PLUS expr .
    (5) expr -> expr . PLUS expr
    (6) expr -> expr . MINUS expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 5 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6

  ! PLUS            [ reduce using rule 5 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 5 (expr -> expr PLUS expr .) ]


state 8

    (7) expr -> empty .

    PLUS            reduce using rule 7 (expr -> empty .)
    MINUS           reduce using rule 7 (expr -> empty .)
    $end            reduce using rule 7 (expr -> empty .)


state 9

    (6) expr -> expr MINUS expr .
    (5) expr -> expr . PLUS expr
    (6) expr -> expr . MINUS expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 6 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 5
    MINUS           shift and go to state 6

  ! PLUS            [ reduce using rule 6 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 6 (expr -> expr MINUS expr .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 7 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 7 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (program -> empty)
WARNING: rejected rule (expr -> empty) in state 3
